%%-------------------------------------------------------------------------
%% TPT S-Function RTW Frame                                                
%%-------------------------------------------------------------------------
%% File : HQEV_MiL_20160830_integrate_r2017a_testframe_tpt.tlc
%%-------------------------------------------------------------------------
%%   --- THIS FILE GENERATED BY TPT S-FUNCTION BUILDER: $Revision$ ---
%%-------------------------------------------------------------------------
%%
%% Description: 
%%   Real-Time Workshop wrapper functions interface generated for
%%   S-function "HQEV_MiL_20160830_integrate_r2017a_testframe_tpt.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the
%%   Real-Time Workshop, see the Target Language Compiler manual
%%   (under Real-Time Workshop) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%%   --- THIS FILE GENERATED BY TPT S-FUNCTION BUILDER: $Revision$ ---
%%
%implements  HQEV_MiL_20160830_integrate_r2017a_testframe_tpt "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
/* BlockInstanceSetup %<Type> Block: %<Name> */
#include "TPT_Sfun_inlined.h"
  %closefile externs
  %<LibCacheExtern(externs)>
%%

%endfunction

%% Function: BlockInstanceSetup ===============================================
%%
%% Purpose:
%%      Set up definitions
%%
%function BlockInstanceSetup(block, system) void

  %openfile sourcecode

#define NUM_INPUTS          13
#define NUM_OUTPUTS         13

  /* BlockInstanceSetup %<Type> Block: %<Name> */

tpt_basetype tpt_in_types[NUM_INPUTS-1] = {
  tpt_type_bool,
  tpt_type_bool,
  tpt_type_bool,
  tpt_type_bool,
  tpt_type_uint8,
  tpt_type_uint8,
  tpt_type_uint8,
  tpt_type_uint8,
  tpt_type_uint8,
  tpt_type_uint8,
  tpt_type_uint8,
  tpt_type_uint8
};

int tpt_in_dim1[NUM_INPUTS-1] = {
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1  
};

int tpt_in_dim2[NUM_INPUTS-1] = {
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0  
};

char *tpt_in_names[NUM_INPUTS-1] = {
  "pPUD_bool_AcPwrEnbl",
  "pPUD_bool_DcDcEna",
  "pPUD_bool_PtcPwrEnbl",
  "pPUD_bool_RpdDisChrgPerm",
  "pPUD_st_AcChrgModeSt",
  "pPUD_st_AcHeatModeSt",
  "pPUD_st_BmsReq",
  "pPUD_st_ChrgrCmd",
  "pPUD_st_CoorrSts",
  "pPUD_st_DcChrgModeSt",
  "pPUD_st_DcHeatModeSt",
  "pPUD_st_HVOnModeSt"
};

int tpt_in_vm_adr[NUM_INPUTS-1];

tpt_basetype tpt_out_types[NUM_OUTPUTS-1] = {
  tpt_type_uint8,
  tpt_type_uint8,
  tpt_type_uint32,
  tpt_type_bool,
  tpt_type_bool,
  tpt_type_float,
  tpt_type_float,
  tpt_type_uint8,
  tpt_type_bool,
  tpt_type_bool,
  tpt_type_bool,
  tpt_type_uint8
};

int tpt_out_dim1[NUM_OUTPUTS-1] = {
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1,
 1  
};

int tpt_out_dim2[NUM_OUTPUTS-1] = {
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0,
 0  
};

char *tpt_out_names[NUM_OUTPUTS-1] = {
  "pBMSA_st_BmsSt",
  "pDCCA_st_DcDcActSts",
  "pERR_st_ReactEGC",
  "pMCI_bool_MCU1ShtdwnAllow",
  "pMCI_bool_MCU2ShtdwnAllow",
  "pMCI_V_MCU1MotCapVolt",
  "pMCI_V_MCU2MotCapVolt",
  "pTBCA_st_ChrgrSts",
  "pTBCI_bool_ACChrgrPlugDtctd",
  "pTBCI_bool_DCChrgrPlugDtctd",
  "pTMCA_bool_HvPwrOffEnbl",
  "pVMM_st_PUDCoorrReq"
};

int tpt_out_vm_adr[NUM_OUTPUTS-1];

void *tpt_out_Ptr[NUM_OUTPUTS-1];
void *tpt_in_Ptr[NUM_INPUTS-1];
tpt_in_out tpt_io_description = {
  NUM_INPUTS-1,
  tpt_in_Ptr,
  tpt_in_names,
  tpt_in_vm_adr,
  tpt_in_dim1,
  tpt_in_dim2,
  tpt_in_types,
  NUM_OUTPUTS-1,
  tpt_out_Ptr,
  tpt_out_names,
  tpt_out_vm_adr,
  tpt_out_dim1,
  tpt_out_dim2,
  tpt_out_types
};
  %closefile sourcecode
  %<SLibCacheSourceCode(sourcecode)>

%endfunction

%% Function: Start ============================================
%% Abstract:
%% Set the output to the constant parameter value if the block
%% output is visible in the model's start function scope, i.e.,
%% it is in the global rtB structure.
%%
%function Start(block, system) Output

  /* BlockStart %<Type> Block: %<Name> */
  %assign pPUD_bool_AcPwrEnbl  = LibBlockInputSignalAddr(1, "", "", 0)
  %assign pPUD_bool_DcDcEna    = LibBlockInputSignalAddr(2, "", "", 0)
  %assign pPUD_bool_PtcPwrEnbl = LibBlockInputSignalAddr(3, "", "", 0)
  %assign pPUD_bool_RpdDisChrgPerm = LibBlockInputSignalAddr(4, "", "", 0)
  %assign pPUD_st_AcChrgModeSt = LibBlockInputSignalAddr(5, "", "", 0)
  %assign pPUD_st_AcHeatModeSt = LibBlockInputSignalAddr(6, "", "", 0)
  %assign pPUD_st_BmsReq       = LibBlockInputSignalAddr(7, "", "", 0)
  %assign pPUD_st_ChrgrCmd     = LibBlockInputSignalAddr(8, "", "", 0)
  %assign pPUD_st_CoorrSts     = LibBlockInputSignalAddr(9, "", "", 0)
  %assign pPUD_st_DcChrgModeSt = LibBlockInputSignalAddr(10, "", "", 0)
  %assign pPUD_st_DcHeatModeSt = LibBlockInputSignalAddr(11, "", "", 0)
  %assign pPUD_st_HVOnModeSt   = LibBlockInputSignalAddr(12, "", "", 0)
  %assign pBMSA_st_BmsSt       = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign pDCCA_st_DcDcActSts  = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign pERR_st_ReactEGC     = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign pMCI_bool_MCU1ShtdwnAllow = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign pMCI_bool_MCU2ShtdwnAllow = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign pMCI_V_MCU1MotCapVolt = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign pMCI_V_MCU2MotCapVolt = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign pTBCA_st_ChrgrSts    = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign pTBCI_bool_ACChrgrPlugDtctd = LibBlockOutputSignalAddr(9, "", "", 0)
  %assign pTBCI_bool_DCChrgrPlugDtctd = LibBlockOutputSignalAddr(10, "", "", 0)
  %assign pTMCA_bool_HvPwrOffEnbl = LibBlockOutputSignalAddr(11, "", "", 0)
  %assign pVMM_st_PUDCoorrReq  = LibBlockOutputSignalAddr(12, "", "", 0)
  tpt_io_description.tpt_outs[0]                 = %<pBMSA_st_BmsSt>;
  tpt_io_description.tpt_outs[1]                 = %<pDCCA_st_DcDcActSts>;
  tpt_io_description.tpt_outs[2]                 = %<pERR_st_ReactEGC>;
  tpt_io_description.tpt_outs[3]                 = %<pMCI_bool_MCU1ShtdwnAllow>;
  tpt_io_description.tpt_outs[4]                 = %<pMCI_bool_MCU2ShtdwnAllow>;
  tpt_io_description.tpt_outs[5]                 = %<pMCI_V_MCU1MotCapVolt>;
  tpt_io_description.tpt_outs[6]                 = %<pMCI_V_MCU2MotCapVolt>;
  tpt_io_description.tpt_outs[7]                 = %<pTBCA_st_ChrgrSts>;
  tpt_io_description.tpt_outs[8]                 = %<pTBCI_bool_ACChrgrPlugDtctd>;
  tpt_io_description.tpt_outs[9]                 = %<pTBCI_bool_DCChrgrPlugDtctd>;
  tpt_io_description.tpt_outs[10]                 = %<pTMCA_bool_HvPwrOffEnbl>;
  tpt_io_description.tpt_outs[11]                 = %<pVMM_st_PUDCoorrReq>;
  tpt_io_description.tpt_ins[0] = %<pPUD_bool_AcPwrEnbl>;
  tpt_io_description.tpt_ins[1] = %<pPUD_bool_DcDcEna>;
  tpt_io_description.tpt_ins[2] = %<pPUD_bool_PtcPwrEnbl>;
  tpt_io_description.tpt_ins[3] = %<pPUD_bool_RpdDisChrgPerm>;
  tpt_io_description.tpt_ins[4] = %<pPUD_st_AcChrgModeSt>;
  tpt_io_description.tpt_ins[5] = %<pPUD_st_AcHeatModeSt>;
  tpt_io_description.tpt_ins[6] = %<pPUD_st_BmsReq>;
  tpt_io_description.tpt_ins[7] = %<pPUD_st_ChrgrCmd>;
  tpt_io_description.tpt_ins[8] = %<pPUD_st_CoorrSts>;
  tpt_io_description.tpt_ins[9] = %<pPUD_st_DcChrgModeSt>;
  tpt_io_description.tpt_ins[10] = %<pPUD_st_DcHeatModeSt>;
  tpt_io_description.tpt_ins[11] = %<pPUD_st_HVOnModeSt>;

%endfunction

%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  /* S-Function "tpt_sfun" Block: %<Name> */

{

  %assign steuer               = LibBlockInputSignalAddr(0, "", "", 0)
  %assign status               = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements0           = LibBlockParameterSize(P1)
  %assign param_width0         = nelements0[0] * nelements0[1]
  %if (param_width0) > 1
    %assign pp0                = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp0                = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign py_width             = LibBlockOutputSignalWidth(0)
  %assign pu_width             = LibBlockOutputSignalWidth(0)
  %assign stepsize             = LibBlockParameterAddr(P2, "", "", 0)
  %assign binfile              = LibBlockMatrixParameterBaseAddr(P3)
  %assign binfile_size         = LibBlockParameterSize(P3)
  %assign binfile_len         = binfile_size[0] * binfile_size[1]
   tpt_sfun(
      %<pp0>,
      %<param_width0>,
      *(%<stepsize>),
      %<steuer>,
      %<status>,
      (const tpt_byte**)(&(%<RTMGetErrStat()>)),
      %<binfile>,
      %<binfile_len>,
      &tpt_io_description);
}

%endfunction
%% Function: Terminate ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlTerminate function.
%%
%function Terminate(block, system) Output
   tpt_sfun_terminate();
%endfunction


%% [EOF] HQEV_MiL_20160830_integrate_r2017a_testframe_tpt.tlc
